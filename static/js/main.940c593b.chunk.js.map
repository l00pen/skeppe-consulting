{"version":3,"sources":["Background/slipgatan2.m4v","Projects/soundcloud2.png","Projects/namely-logo.png","Projects/hemnet_logo.svg","Projects/56k.png","Background/index.js","Projects/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Background","react_default","a","createElement","className","autoPlay","loop","id","muted","plays-inline","src","slipgatan","type","Component","ImgLogo","styled","img","withConfig","displayName","componentId","ProjectRoot","div","TitleRoot","Title","hr","h3","LogoGroup","Projects","namely","soundcloud","fiftySixK","hemnet","AppRoot","AppTitle","h1","AppHeader","header","AppFooter","footer","AppContent","main","Divider","Section","section","App","src_Background","App_Divider","src_Projects","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.940c593b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/slipgatan2.e8e21b72.m4v\";","module.exports = __webpack_public_path__ + \"static/media/soundcloud2.0138f7ea.png\";","module.exports = __webpack_public_path__ + \"static/media/namely-logo.01d93467.png\";","module.exports = __webpack_public_path__ + \"static/media/hemnet_logo.c0747291.svg\";","module.exports = __webpack_public_path__ + \"static/media/56k.ce77bb67.png\";","import React, { Component } from 'react';\nimport slipgatan from './slipgatan2.m4v';\n\nimport './styles.css';\n\nclass Background extends Component {\n  render() {\n    return (\n      <video className=\"Background\" autoPlay loop id=\"video-background\" muted plays-inline={\"true\"}>\n        <source src={slipgatan} type=\"video/mp4\" />\n      </video>\n    );\n  }\n}\n\nexport default Background;\n","import React, { Component } from 'react';\nimport styled from 'styled-components/macro'\nimport soundcloud from './soundcloud2.png';\nimport namely from './namely-logo.png';\nimport hemnet from './hemnet_logo.svg';\nimport fiftySixK from './56k.png';\n\nconst ImgLogo = styled.img`\n  height: 25px;\n  margin: 0;\n\n  @media only screen and (min-width: 768px) {\n    margin: 0 1em;\n  } \n`;\n\nconst ProjectRoot = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n\nconst TitleRoot = styled.div`\n  position: relative;\n  width: fit-content;\n  margin: 0 auto 1em;\n`\n\nconst Divider = styled.hr`\n  width: 100%;\n  border: 0;\n  height: 1px;\n  background-color: rgba(0, 0, 0, 0.4);\n`;\n\nconst Title = styled.h3`\n  font-weight: 100;\n  margin-bottom: 0.2em;\n`;\n\nconst LogoGroup = styled.div`\n  display: flex;\n  justify-content: space-between;\n\n  @media only screen and (min-width: 768px) {\n    justify-content: center;\n  } \n`;\n\nclass Projects extends Component {\n  render() {\n    return (\n      <ProjectRoot>\n        <TitleRoot>\n          <Title>Brands I worked with</Title>\n        </TitleRoot>\n        <LogoGroup>\n          <ImgLogo src={namely} />\n          <ImgLogo src={soundcloud} />\n          <ImgLogo src={fiftySixK} />\n          <ImgLogo src={hemnet} />\n        </LogoGroup>\n      </ProjectRoot>\n    );\n  }\n}\n\nexport default Projects;\n","import React, { Component } from 'react';\nimport styled from 'styled-components/macro'\nimport Background from './Background';\nimport Projects from './Projects';\n\nconst AppRoot = styled.div`\n  text-align: center;\n  font-weight: 200;\n\n  display: flex;\n  height: 100vh;\n  flex-direction: column;\n\n  z-index: 0;\n`;\n\nconst AppTitle = styled.h1`\n  color: rgba(0, 0, 0, 1);\n  font-size: 15vw;\n  font-weight: 100;\n\n  @media only screen and (min-width: 768px) {\n    font-size: 5vw;\n  } \n`;\n\nconst AppHeader = styled.header`\n  height: 2vh;\n  z-index: 1;\n`;\n\nconst AppFooter = styled.footer`\n  height: 2vh;\n  z-index: 1;\n`;\n\nconst AppContent = styled.main`\n  overflow: auto;\n  flex: 1;\n  padding: 5vh 5vw;\n`;\n\nconst Divider = styled.hr`\n  width: 50%;\n  background-color: rgba(245,245,245,0.7);\n  color: rgba(245,245,245,0.7);\n  border: 0;\n  height: 1px;\n`;\n\nconst Section = styled.section`\n  background-color: rgba(245,245,245,0.7);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  flex: 1 0 auto;\n  padding: 0.5em;\n  min-height: 20em;\n`;\n\n\nclass App extends Component {\n  render() {\n    const email = 'lovisa@skeppeconsulting.com';\n    return (\n      <AppRoot>\n        <Background />\n        <AppHeader />\n        <AppContent>\n          <Section>\n            <AppTitle>SKEPPE CONSULTING</AppTitle>\n            <p>\n              {email}\n            </p>\n          </Section>\n          <Divider />\n          <Section>\n            <Projects />\n          </Section>\n        </AppContent>\n        <AppFooter />\n      </AppRoot>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}